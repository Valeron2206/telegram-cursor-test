// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–≥–∞ –∫—É—Ä—Å–æ—Ä–∞
class CursorBugTest {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.messageInput = null;
        this.sendButton = null;
        this.messagesContainer = null;
        this.debugPanel = null;
        
        this.init();
    }
    
    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setup());
        } else {
            this.setup();
        }
    }
    
    setup() {
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        this.messageInput = document.getElementById('message-input');
        this.sendButton = document.getElementById('send-btn');
        this.messagesContainer = document.getElementById('messages');
        this.debugPanel = document.getElementById('debug-panel');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        this.initTelegram();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.setupEvents();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        this.updateStatus();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ viewport
        this.startViewportMonitoring();
        
        console.log('‚úÖ –¢–µ—Å—Ç –≥–æ—Ç–æ–≤');
    }
    
    initTelegram() {
        if (this.tg) {
            console.log('üì± Telegram WebApp –∞–∫—Ç–∏–≤–µ–Ω');
            this.tg.ready();
            this.tg.expand();
            
            // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ—Ç–ª—É—é
            this.tg.setHeaderColor('#25D366');
            
            document.getElementById('status').textContent = 'Telegram WebApp –∞–∫—Ç–∏–≤–µ–Ω';
        } else {
            console.log('üåê –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä');
            document.getElementById('status').textContent = '–û—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram';
        }
    }
    
    setupEvents() {
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ - –¢–£–¢ –ü–†–û–ò–°–•–û–î–ò–¢ –ë–ê–ì
        this.messageInput.addEventListener('focus', () => {
            console.log('üéØ –ü–æ–ª–µ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å');
            
            if (this.isIOS() && this.tg) {
                console.log('üêõ iOS + Telegram = –±–∞–≥ –∫—É—Ä—Å–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—è–≤–∏—Ç—å—Å—è!');
                document.getElementById('status').textContent = '–ë–∞–≥ –∫—É—Ä—Å–æ—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω!';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º debug –ø–∞–Ω–µ–ª—å –Ω–∞ iOS
                this.debugPanel.classList.add('show');
            }
            
            this.updateDebugInfo();
        });
        
        // –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞
        this.messageInput.addEventListener('blur', () => {
            console.log('üëã –ü–æ–ª–µ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å');
            document.getElementById('status').textContent = '–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é';
        });
        
        // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        this.messageInput.addEventListener('input', () => {
            this.updateDebugInfo();
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.sendButton.addEventListener('click', () => {
            this.sendMessage();
        });
        
        // Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.sendMessage();
            }
        });
    }
    
    sendMessage() {
        const text = this.messageInput.value.trim();
        if (!text) return;
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞:', text);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.addMessage(text, true);
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        this.messageInput.value = '';
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        setTimeout(() => {
            this.addMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! üëç', false);
        }, 1000);
    }
    
    addMessage(text, isOutgoing = false) {
        const messageGroup = this.messagesContainer.querySelector('.message-group');
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isOutgoing ? 'outgoing' : 'incoming'} new`;
        
        const now = new Date();
        const time = now.getHours().toString().padStart(2, '0') + ':' + 
                    now.getMinutes().toString().padStart(2, '0');
        
        messageDiv.innerHTML = `
            <div class="message-bubble">${text}</div>
            <div class="message-time">${time}</div>
        `;
        
        messageGroup.appendChild(messageDiv);
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        setTimeout(() => {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
    }
    
    updateStatus() {
        const platform = this.isIOS() ? 'üçé iOS' : 'ü§ñ –î—Ä—É–≥–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞';
        const telegram = this.tg ? '‚úÖ Telegram' : '‚ùå –ë—Ä–∞—É–∑–µ—Ä';
        
        document.getElementById('platform').textContent = platform;
        document.getElementById('status').textContent = `${platform} | ${telegram}`;
    }
    
    startViewportMonitoring() {
        const updateViewport = () => {
            const viewport = `${window.innerWidth}x${window.innerHeight}`;
            document.getElementById('viewport').textContent = viewport;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ Visual Viewport API
            if (window.visualViewport) {
                const keyboardVisible = window.visualViewport.height < window.innerHeight;
                document.getElementById('keyboard').textContent = keyboardVisible ? '–î–∞' : '–ù–µ—Ç';
            }
            
            this.updateDebugInfo();
        };
        
        window.addEventListener('resize', updateViewport);
        
        if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', updateViewport);
        }
        
        updateViewport();
    }
    
    updateDebugInfo() {
        if (!this.messageInput) return;
        
        const rect = this.messageInput.getBoundingClientRect();
        console.log('üìç –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—è:', {
            top: rect.top,
            bottom: rect.bottom,
            height: rect.height
        });
    }
    
    isIOS() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
new CursorBugTest();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e.error);
});

console.log('üì± –¢–µ—Å—Ç –±–∞–≥–∞ –∫—É—Ä—Å–æ—Ä–∞ –≤ Telegram Mini App');
console.log('üéØ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞ iPhone –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');